package main

import "errors"

type Memory struct {
	ram [4096]byte
}

func InitMemory() Memory {
	return Memory{[4096]byte{0}}
}

func (m *Memory) CreateFont() {
	//0
	m.WriteMemoryByte(0x0, 0xF0)
	m.WriteMemoryByte(0x1, 0x90)
	m.WriteMemoryByte(0x2, 0x90)
	m.WriteMemoryByte(0x3, 0x90)
	m.WriteMemoryByte(0x4, 0xF0)
	//1
	m.WriteMemoryByte(0x5, 0x20)
	m.WriteMemoryByte(0x6, 0x60)
	m.WriteMemoryByte(0x7, 0x20)
	m.WriteMemoryByte(0x8, 0x20)
	m.WriteMemoryByte(0x9, 0x70)
	//2
	m.WriteMemoryByte(0xA, 0xF0)
	m.WriteMemoryByte(0xB, 0x10)
	m.WriteMemoryByte(0xC, 0xF0)
	m.WriteMemoryByte(0xD, 0x80)
	m.WriteMemoryByte(0xE, 0xF0)
	//3
	m.WriteMemoryByte(0xF, 0xF0)
	m.WriteMemoryByte(0x10, 0x10)
	m.WriteMemoryByte(0x11, 0xF0)
	m.WriteMemoryByte(0x12, 0x10)
	m.WriteMemoryByte(0x13, 0xF0)
	//4
	m.WriteMemoryByte(0x14, 0x90)
	m.WriteMemoryByte(0x15, 0x90)
	m.WriteMemoryByte(0x16, 0xF0)
	m.WriteMemoryByte(0x17, 0x10)
	m.WriteMemoryByte(0x18, 0x10)
	//5
	m.WriteMemoryByte(0x19, 0xF0)
	m.WriteMemoryByte(0x1A, 0x80)
	m.WriteMemoryByte(0x1B, 0xF0)
	m.WriteMemoryByte(0x1C, 0x10)
	m.WriteMemoryByte(0x1D, 0xF0)
	//6
	m.WriteMemoryByte(0x1E, 0xF0)
	m.WriteMemoryByte(0x1F, 0x80)
	m.WriteMemoryByte(0x20, 0xF0)
	m.WriteMemoryByte(0x21, 0x90)
	m.WriteMemoryByte(0x22, 0xF0)
	//7
	m.WriteMemoryByte(0x23, 0xF0)
	m.WriteMemoryByte(0x24, 0x10)
	m.WriteMemoryByte(0x25, 0x20)
	m.WriteMemoryByte(0x26, 0x40)
	m.WriteMemoryByte(0x27, 0x40)
	//8
	m.WriteMemoryByte(0x28, 0xF0)
	m.WriteMemoryByte(0x29, 0x90)
	m.WriteMemoryByte(0x2A, 0xF0)
	m.WriteMemoryByte(0x2B, 0x90)
	m.WriteMemoryByte(0x2C, 0xF0)
	//9
	m.WriteMemoryByte(0x2D, 0xF0)
	m.WriteMemoryByte(0x2E, 0x90)
	m.WriteMemoryByte(0x2F, 0xF0)
	m.WriteMemoryByte(0x30, 0x10)
	m.WriteMemoryByte(0x31, 0x10)
	//A
	m.WriteMemoryByte(0x32, 0xF0)
	m.WriteMemoryByte(0x33, 0x90)
	m.WriteMemoryByte(0x34, 0xF0)
	m.WriteMemoryByte(0x35, 0x90)
	m.WriteMemoryByte(0x36, 0x90)
	//B
	m.WriteMemoryByte(0x37, 0xE0)
	m.WriteMemoryByte(0x38, 0x90)
	m.WriteMemoryByte(0x39, 0xE0)
	m.WriteMemoryByte(0x3A, 0x90)
	m.WriteMemoryByte(0x3B, 0xE0)
	//C
	m.WriteMemoryByte(0x3C, 0xF0)
	m.WriteMemoryByte(0x3D, 0x80)
	m.WriteMemoryByte(0x3E, 0x80)
	m.WriteMemoryByte(0x3F, 0x80)
	m.WriteMemoryByte(0x40, 0xF0)
	//D
	m.WriteMemoryByte(0x41, 0xE0)
	m.WriteMemoryByte(0x42, 0x90)
	m.WriteMemoryByte(0x43, 0x90)
	m.WriteMemoryByte(0x44, 0x90)
	m.WriteMemoryByte(0x45, 0xE0)
	//E
	m.WriteMemoryByte(0x46, 0xF0)
	m.WriteMemoryByte(0x47, 0x80)
	m.WriteMemoryByte(0x48, 0xF0)
	m.WriteMemoryByte(0x49, 0x80)
	m.WriteMemoryByte(0x4A, 0xF0)
	//F
	m.WriteMemoryByte(0x4B, 0xF0)
	m.WriteMemoryByte(0x4C, 0x80)
	m.WriteMemoryByte(0x4D, 0xF0)
	m.WriteMemoryByte(0x4E, 0x80)
	m.WriteMemoryByte(0x4F, 0x80)
}

func (m *Memory) WriteMemoryByte(addr uint16, b byte) (byte, error) {
	if addr >= 4096 {
		return 0, errors.New("addr must be at most 0x1000")
	}
	m.ram[addr] = b
	return b, nil
}

func (m *Memory) ReadMemoryByte(addr uint16) (byte, error) {
	if addr >= 4096 {
		return 0, errors.New("addr must be at most 0x1000")
	}
	return m.ram[addr], nil
}
